<?xml version="1.0" encoding="utf-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
    version="2.4">
	
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>/WEB-INF/configuration/spring/applicationContext*.xml
		</param-value>
  </context-param>
  <context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>etipcc.root</param-value>
	</context-param>
	<context-param>
  		<param-name>log4jRefreshInterval</param-name>
  		<param-value>60000</param-value>
 	</context-param>
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/configuration/log4j/log4j.properties</param-value>
	</context-param>
	
	<listener>
		<listener-class>
			org.springframework.web.util.Log4jConfigListener
		</listener-class>
	</listener>  
  	<listener>
    	<listener-class> 
            org.springframework.web.context.ContextLoaderListener
        </listener-class>
  	</listener>
   	<listener>
		<listener-class>
			com.itour.etip.pub.frame.SpringContextHelper
		</listener-class>
	</listener>
	<context-param>
		<param-name>cacheConfiguration</param-name>
		<param-value>/WEB-INF/configuration/cache</param-value>
	</context-param>
	<listener> 
        <listener-class> 
            com.itour.etip.pub.kit.cache.InitCacheListener
        </listener-class> 
    </listener>    
    
    <listener>
    	<!--授权管理 SSO使用-->
		  <listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class>
	  </listener>
    <listener>
     	<!--授权管理 spring security使用-->
      <listener-class>org.springframework.security.ui.session.HttpSessionEventPublisher</listener-class>
    </listener>
    
    <!-- 订单编号监听 何大勇-->
    <listener>
		<listener-class>com.common.util.OrderCodeSetterListener</listener-class>
	</listener>
  	<listener> 
        <listener-class> 
            com.mini.util.TemplatePicListener
        </listener-class> 
    </listener>

		
	 <!-- CAS单点登录配置开始-->
      <!-- 转换编码，必须添加，使用CAS后如果不添加则是中文乱码-->
      	<filter>
                <filter-name>encodingFilter</filter-name>
                <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
                <init-param>
                        <param-name>encoding</param-name>
                        <param-value>UTF-8</param-value>
                </init-param>
                <init-param>
                        <param-name>forceEncoding</param-name>
                        <param-value>true</param-value>
                </init-param>
        </filter>
        <filter-mapping>
                <filter-name>encodingFilter</filter-name>
                <url-pattern>/*</url-pattern>
        </filter-mapping>
		<!-- 用于单点退出，该过滤器监听实现单点登出功能，可选配置  -->
         <listener>  
	        <listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class>  
	    </listener>  
	    <!-- 该过滤器用于实现单点登出功能，可选配置。 -->
        <filter>  
	        <filter-name>CAS Single Sign Out Filter</filter-name>  
	        <filter-class>org.jasig.cas.client.session.SingleSignOutFilter</filter-class>  
	    </filter>  
	    <!-- 该过滤器负责用户的认证工作，必须启用它  -->
	    <filter>
		   <filter-name>CAS Authentication Filter</filter-name>
		   <filter-class>org.jasig.cas.client.authentication.AuthenticationFilter</filter-class>
		     <init-param>
		       <param-name>casServerLoginUrl</param-name>
		       <param-value>http://192.168.5.55:9997/mini-cas/login</param-value>
		   </init-param>
		   <init-param>
		    <param-name>serverName</param-name>
		    <param-value>http://192.168.5.55:8080</param-value>
		   </init-param>
		</filter> 
		 <!-- 该过滤器负责对Ticket的校验工作，必须启用它  -->
		<filter>
		   <filter-name>CAS Validation Filter</filter-name>
		   <filter-class>org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter</filter-class>
		   <init-param>
		    <param-name>casServerUrlPrefix</param-name>
		    <param-value>http://192.168.5.55:9997/mini-cas</param-value>
		   </init-param>
		   <init-param>
		    <param-name>serverName</param-name>
		    <param-value>http://192.168.5.55:8080</param-value>
		   </init-param>
		   <init-param>
		    <param-name>redirectAfterValidation</param-name>
		    <param-value>true</param-value>
		   </init-param>
		   <init-param>  
	        <param-name>encoding</param-name>  
	          <param-value>UTF-8</param-value>  
	      </init-param> 
		</filter>
		 <!--   
		        该过滤器负责实现HttpServletRequest请求的包裹，   
		        比如允许开发者通过HttpServletRequest的getRemoteUser()方法获得SSO登录用户的登录名，可选配置。   -->
	    
		<filter>
		   <filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>
		   <filter-class>org.jasig.cas.client.util.HttpServletRequestWrapperFilter</filter-class>
		</filter>
		  <!--   
		       该过滤器使得开发者可以通过org.jasig.cas.client.util.AssertionHolder来获取用户的登录名。   
		       比如AssertionHolder.getAssertion().getPrincipal().getName()。  --> 
	     
		<filter>
		   <filter-name>CAS Assertion Thread Local Filter</filter-name>
		   <filter-class>org.jasig.cas.client.util.AssertionThreadLocalFilter</filter-class>
		</filter>
		<filter-mapping>  
        <filter-name>CAS Single Sign Out Filter</filter-name>  
        <url-pattern>/*</url-pattern>  
        </filter-mapping>  
		<filter-mapping>
		   <filter-name>CAS Authentication Filter</filter-name>
		   <url-pattern>/view/pages/mini/front/login.jsp</url-pattern>
		</filter-mapping>
		<filter-mapping>
		   <filter-name>CAS Validation Filter</filter-name>
		   <url-pattern>/view/pages/mini/front/login.jsp</url-pattern>
		</filter-mapping>
		<filter-mapping>
		   <filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>
		   <url-pattern>/view/pages/mini/front/login.jsp</url-pattern>
		</filter-mapping>
		<filter-mapping>
		   <filter-name>CAS Assertion Thread Local Filter</filter-name>
		   <url-pattern>/view/pages/mini/front/login.jsp</url-pattern>
		</filter-mapping>
	<!-- 自定义过滤器，登出后，注销CAS-->
        <filter>  
	        <filter-name>LogOutFilter</filter-name>  
	        <filter-class>com.mini.util.CasLogOutFilter</filter-class> 
	        <init-param>
		    <param-name>casServerOutUrl</param-name>
		    <param-value>http://localhost:9997/mini-cas/logout</param-value>
		   </init-param> 
	    </filter> 
	     <filter-mapping>
			<filter-name>LogOutFilter</filter-name>
			<url-pattern>/j_spring_security_logout</url-pattern>
		</filter-mapping>
	<!-- 自定义过登出滤器结束--> 
		
		
		
		
	<!--
		springSecurityFilterChain
		CAS Single Sign Out Filter
		为授权管理模块使用
		-->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

<!--     <filter-mapping> -->
<!-- 		<filter-name>encodingFilter</filter-name> -->
<!-- 		<url-pattern>/*</url-pattern> -->
<!-- 	</filter-mapping> -->
    
    <!--<filter>	
    	
    <filter-name>hibernateFilter</filter-name> 
       <filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter </filter-class> 
       <init-param>
            <param-name>singleSession</param-name>
            <param-value>false</param-value>
        </init-param>
    </filter>
 -->
<!-- 	<filter-mapping> -->
<!-- 	   <filter-name>CAS Single Sign Out Filter</filter-name> -->
<!-- 	   <url-pattern>/*</url-pattern> -->
<!-- 	</filter-mapping> -->

    <filter-mapping>
      <filter-name>springSecurityFilterChain</filter-name>
      <url-pattern>/*</url-pattern>
    </filter-mapping>
    <filter>
        <filter-name>struts2</filter-name>
        <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>struts2</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
  
    

    
    <filter> 
    <filter-name>Demo1Filter</filter-name> 
    <filter-class>com.common.util.AccesstatisticsFilter</filter-class> 
    
	</filter> 
	<filter-mapping> 
	    <filter-name>Demo1Filter</filter-name> 
	    <url-pattern>*</url-pattern> 
	    <dispatcher>REQUEST</dispatcher> <!-- 没有配置dispatcher就是默认request方式的 --> 
	    <dispatcher>FORWARD</dispatcher> 
	    <dispatcher>ERROR</dispatcher> 
	    <dispatcher>INCLUDE</dispatcher> 
	</filter-mapping> 
    
    <error-page>
    	<error-code>404</error-code>
    	<location>/404.jsp</location>
    </error-page>
    <error-page>
    	<error-code>500</error-code>
    	<location>/500.jsp</location>
    </error-page>
    
    
    
    
     <session-config>   
                  <session-timeout>9999999</session-timeout>   
     </session-config>   
     
     
     <jsp-config>
         <taglib>
			<taglib-uri>/WEB-INF/tag/PageTag</taglib-uri>
			<taglib-location>/WEB-INF/tag/PageTag.tld</taglib-location>
		</taglib>
     </jsp-config>
</web-app>